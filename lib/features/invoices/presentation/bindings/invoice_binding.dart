// // lib/features/invoices/presentation/bindings/invoice_binding.dart
// import 'package:get/get.dart';
// import '../../../../app/core/network/dio_client.dart';
// import '../../../../app/core/network/network_info.dart';
// import '../../../../app/core/storage/secure_storage_service.dart';

// import '../../domain/repositories/invoice_repository.dart';
// import '../../domain/usecases/get_invoices_usecase.dart';
// import '../../domain/usecases/get_invoice_by_id_usecase.dart';
// import '../../domain/usecases/get_invoice_by_number_usecase.dart';
// import '../../domain/usecases/create_invoice_usecase.dart';
// import '../../domain/usecases/update_invoice_usecase.dart';
// import '../../domain/usecases/confirm_invoice_usecase.dart';
// import '../../domain/usecases/cancel_invoice_usecase.dart';
// import '../../domain/usecases/add_payment_usecase.dart';
// import '../../domain/usecases/get_invoice_stats_usecase.dart';
// import '../../domain/usecases/get_overdue_invoices_usecase.dart';
// import '../../domain/usecases/delete_invoice_usecase.dart';
// import '../../domain/usecases/search_invoices_usecase.dart';
// import '../../domain/usecases/get_invoices_by_customer_usecase.dart';

// import '../../data/datasources/invoice_remote_datasource.dart';
// import '../../data/datasources/invoice_local_datasource.dart';
// import '../../data/repositories/invoice_repository_impl.dart';

// // ‚úÖ NUEVO: Importar use cases de clientes y productos
// import '../../../customers/domain/usecases/get_customers_usecase.dart';
// import '../../../customers/domain/usecases/search_customers_usecase.dart';
// import '../../../products/domain/usecases/get_products_usecase.dart';
// import '../../../products/domain/usecases/search_products_usecase.dart';

// import '../controllers/invoice_list_controller.dart';
// import '../controllers/invoice_form_controller.dart';
// import '../controllers/invoice_detail_controller.dart';
// import '../controllers/invoice_stats_controller.dart';

// class InvoiceBinding extends Bindings {
//   @override
//   void dependencies() {
//     print('üîß InvoiceBinding: Configurando dependencias...');

//     // ==================== VERIFICACI√ìN DE DEPENDENCIAS CORE ====================
//     _verifyCoreDependencies();

//     // ==================== DATA SOURCES ====================
//     _registerDataSources();

//     // ==================== REPOSITORY ====================
//     _registerRepository();

//     // ==================== USE CASES ====================
//     _registerUseCases();

//     // ==================== STATS CONTROLLER (SINGLETON) ====================
//     _registerStatsController();

//     print('‚úÖ InvoiceBinding: Dependencias configuradas exitosamente');
//   }

//   /// Verificar que las dependencias core est√©n disponibles
//   void _verifyCoreDependencies() {
//     if (!Get.isRegistered<DioClient>()) {
//       throw Exception(
//         'DioClient no est√° registrado. Aseg√∫rate de inicializar CoreBinding primero.',
//       );
//     }
//     if (!Get.isRegistered<NetworkInfo>()) {
//       throw Exception(
//         'NetworkInfo no est√° registrado. Aseg√∫rate de inicializar CoreBinding primero.',
//       );
//     }
//     if (!Get.isRegistered<SecureStorageService>()) {
//       throw Exception(
//         'SecureStorageService no est√° registrado. Aseg√∫rate de inicializar CoreBinding primero.',
//       );
//     }
//     print('‚úÖ Dependencias core verificadas');
//   }

//   /// Registrar data sources
//   void _registerDataSources() {
//     // Remote DataSource
//     Get.lazyPut<InvoiceRemoteDataSource>(
//       () => InvoiceRemoteDataSourceImpl(dioClient: Get.find<DioClient>()),
//       fenix: true,
//     );

//     // Local DataSource
//     Get.lazyPut<InvoiceLocalDataSource>(
//       () => InvoiceLocalDataSourceImpl(
//         storageService: Get.find<SecureStorageService>(),
//       ),
//       fenix: true,
//     );
//     print('‚úÖ Data sources registradas');
//   }

//   /// Registrar repository
//   void _registerRepository() {
//     Get.lazyPut<InvoiceRepository>(
//       () => InvoiceRepositoryImpl(
//         remoteDataSource: Get.find<InvoiceRemoteDataSource>(),
//         localDataSource: Get.find<InvoiceLocalDataSource>(),
//         networkInfo: Get.find<NetworkInfo>(),
//       ),
//       fenix: true,
//     );
//     print('‚úÖ Repository registrado');
//   }

//   /// Registrar use cases
//   void _registerUseCases() {
//     // Read Use Cases
//     Get.lazyPut(
//       () => GetInvoicesUseCase(Get.find<InvoiceRepository>()),
//       fenix: true,
//     );
//     Get.lazyPut(
//       () => GetInvoiceByIdUseCase(Get.find<InvoiceRepository>()),
//       fenix: true,
//     );
//     Get.lazyPut(
//       () => GetInvoiceByNumberUseCase(Get.find<InvoiceRepository>()),
//       fenix: true,
//     );
//     Get.lazyPut(
//       () => GetInvoiceStatsUseCase(Get.find<InvoiceRepository>()),
//       fenix: true,
//     );
//     Get.lazyPut(
//       () => GetOverdueInvoicesUseCase(Get.find<InvoiceRepository>()),
//       fenix: true,
//     );
//     Get.lazyPut(
//       () => SearchInvoicesUseCase(Get.find<InvoiceRepository>()),
//       fenix: true,
//     );
//     Get.lazyPut(
//       () => GetInvoicesByCustomerUseCase(Get.find<InvoiceRepository>()),
//       fenix: true,
//     );

//     // Write Use Cases
//     Get.lazyPut(
//       () => CreateInvoiceUseCase(Get.find<InvoiceRepository>()),
//       fenix: true,
//     );
//     Get.lazyPut(
//       () => UpdateInvoiceUseCase(Get.find<InvoiceRepository>()),
//       fenix: true,
//     );
//     Get.lazyPut(
//       () => ConfirmInvoiceUseCase(Get.find<InvoiceRepository>()),
//       fenix: true,
//     );
//     Get.lazyPut(
//       () => CancelInvoiceUseCase(Get.find<InvoiceRepository>()),
//       fenix: true,
//     );
//     Get.lazyPut(
//       () => AddPaymentUseCase(Get.find<InvoiceRepository>()),
//       fenix: true,
//     );
//     Get.lazyPut(
//       () => DeleteInvoiceUseCase(Get.find<InvoiceRepository>()),
//       fenix: true,
//     );
//     print('‚úÖ Use cases registrados');
//   }

//   /// Registrar controlador de estad√≠sticas (singleton global)
//   void _registerStatsController() {
//     if (!Get.isRegistered<InvoiceStatsController>()) {
//       Get.put(
//         InvoiceStatsController(
//           getInvoiceStatsUseCase: Get.find<GetInvoiceStatsUseCase>(),
//           getOverdueInvoicesUseCase: Get.find<GetOverdueInvoicesUseCase>(),
//         ),
//         permanent: true,
//       );
//       print('‚úÖ InvoiceStatsController registrado como singleton');
//     }
//   }

//   // ==================== M√âTODOS PARA CONTROLADORES ESPEC√çFICOS ====================

//   /// Registrar controlador de lista
//   static void registerListController() {
//     if (!Get.isRegistered<InvoiceListController>()) {
//       try {
//         Get.put(
//           InvoiceListController(
//             getInvoicesUseCase: Get.find<GetInvoicesUseCase>(),
//             searchInvoicesUseCase: Get.find<SearchInvoicesUseCase>(),
//             deleteInvoiceUseCase: Get.find<DeleteInvoiceUseCase>(),
//             confirmInvoiceUseCase: Get.find<ConfirmInvoiceUseCase>(),
//             cancelInvoiceUseCase: Get.find<CancelInvoiceUseCase>(),
//           ),
//           tag: 'invoice_list',
//         );
//         print('‚úÖ InvoiceListController registrado');
//       } catch (e) {
//         print('‚ùå Error registrando InvoiceListController: $e');
//         throw Exception('No se pudo registrar InvoiceListController: $e');
//       }
//     } else {
//       print('‚ÑπÔ∏è InvoiceListController ya est√° registrado');
//     }
//   }

//   /// Registrar controlador de formulario
//   static void registerFormController() {
//     if (!Get.isRegistered<InvoiceFormController>()) {
//       try {
//         // ‚úÖ NUEVO: Obtener use cases de clientes y productos de forma segura
//         final getCustomersUseCase = _getUseCaseSafely<GetCustomersUseCase>();
//         final searchCustomersUseCase =
//             _getUseCaseSafely<SearchCustomersUseCase>();
//         final getProductsUseCase = _getUseCaseSafely<GetProductsUseCase>();
//         final searchProductsUseCase =
//             _getUseCaseSafely<SearchProductsUseCase>();

//         // ‚úÖ NUEVO: Log de disponibilidad de dependencias
//         print('üîç Dependencias disponibles para InvoiceFormController:');
//         print(
//           '   - GetCustomersUseCase: ${getCustomersUseCase != null ? "‚úÖ" : "‚ùå"}',
//         );
//         print(
//           '   - SearchCustomersUseCase: ${searchCustomersUseCase != null ? "‚úÖ" : "‚ùå"}',
//         );
//         print(
//           '   - GetProductsUseCase: ${getProductsUseCase != null ? "‚úÖ" : "‚ùå"}',
//         );
//         print(
//           '   - SearchProductsUseCase: ${searchProductsUseCase != null ? "‚úÖ" : "‚ùå"}',
//         );

//         Get.put(
//           InvoiceFormController(
//             // Dependencias requeridas
//             createInvoiceUseCase: Get.find<CreateInvoiceUseCase>(),
//             updateInvoiceUseCase: Get.find<UpdateInvoiceUseCase>(),
//             getInvoiceByIdUseCase: Get.find<GetInvoiceByIdUseCase>(),
//             // ‚úÖ NUEVO: Dependencias opcionales para clientes y productos
//             getCustomersUseCase: getCustomersUseCase,
//             searchCustomersUseCase: searchCustomersUseCase,
//             getProductsUseCase: getProductsUseCase,
//             searchProductsUseCase: searchProductsUseCase,
//           ),
//         );
//         print(
//           '‚úÖ InvoiceFormController registrado con dependencias disponibles',
//         );
//       } catch (e) {
//         print('‚ùå Error registrando InvoiceFormController: $e');
//         throw Exception('No se pudo registrar InvoiceFormController: $e');
//       }
//     } else {
//       print('‚ÑπÔ∏è InvoiceFormController ya est√° registrado');
//     }
//   }

//   /// ‚úÖ NUEVO: M√©todo helper para obtener use cases de forma segura
//   static T? _getUseCaseSafely<T>() {
//     try {
//       if (Get.isRegistered<T>()) {
//         return Get.find<T>();
//       } else {
//         print('‚ö†Ô∏è UseCase ${T.toString()} no est√° registrado');
//         return null;
//       }
//     } catch (e) {
//       print('‚ö†Ô∏è Error al obtener ${T.toString()}: $e');
//       return null;
//     }
//   }

//   /// Registrar controlador de detalle
//   static void registerDetailController() {
//     if (!Get.isRegistered<InvoiceDetailController>()) {
//       try {
//         Get.put(
//           InvoiceDetailController(
//             getInvoiceByIdUseCase: Get.find<GetInvoiceByIdUseCase>(),
//             addPaymentUseCase: Get.find<AddPaymentUseCase>(),
//             confirmInvoiceUseCase: Get.find<ConfirmInvoiceUseCase>(),
//             cancelInvoiceUseCase: Get.find<CancelInvoiceUseCase>(),
//             deleteInvoiceUseCase: Get.find<DeleteInvoiceUseCase>(),
//           ),
//           tag: 'invoice_detail',
//         );
//         print('‚úÖ InvoiceDetailController registrado');
//       } catch (e) {
//         print('‚ùå Error registrando InvoiceDetailController: $e');
//         throw Exception('No se pudo registrar InvoiceDetailController: $e');
//       }
//     } else {
//       print('‚ÑπÔ∏è InvoiceDetailController ya est√° registrado');
//     }
//   }

//   // ==================== M√âTODOS PARA LIMPIAR CONTROLADORES ====================

//   /// Limpiar controlador de lista
//   static void clearListController() {
//     if (Get.isRegistered<InvoiceListController>(tag: 'invoice_list')) {
//       Get.delete<InvoiceListController>(tag: 'invoice_list');
//       print('üßπ InvoiceListController limpiado');
//     }
//   }

//   /// Limpiar controlador de formulario
//   static void clearFormController() {
//     if (Get.isRegistered<InvoiceFormController>()) {
//       Get.delete<InvoiceFormController>();
//       print('üßπ InvoiceFormController limpiado');
//     }
//   }

//   /// Limpiar controlador de detalle
//   static void clearDetailController() {
//     if (Get.isRegistered<InvoiceDetailController>(tag: 'invoice_detail')) {
//       Get.delete<InvoiceDetailController>(tag: 'invoice_detail');
//       print('üßπ InvoiceDetailController limpiado');
//     }
//   }

//   /// Limpiar todos los controladores espec√≠ficos (mantener stats y dependencias base)
//   static void clearAllScreenControllers() {
//     clearListController();
//     clearFormController();
//     clearDetailController();
//     print('üßπ Todos los controladores de pantalla limpiados');
//   }

//   // ==================== M√âTODOS DE UTILIDAD ====================

//   /// Verificar si todas las dependencias base est√°n registradas
//   static bool areBaseDependenciesRegistered() {
//     return Get.isRegistered<InvoiceRepository>() &&
//         Get.isRegistered<GetInvoicesUseCase>() &&
//         Get.isRegistered<CreateInvoiceUseCase>() &&
//         Get.isRegistered<GetInvoiceByIdUseCase>();
//   }

//   /// Verificar si el controlador de estad√≠sticas est√° registrado
//   static bool isStatsControllerRegistered() {
//     return Get.isRegistered<InvoiceStatsController>();
//   }

//   /// ‚úÖ NUEVO: Verificar dependencias externas disponibles
//   static Map<String, bool> getExternalDependencies() {
//     return {
//       'GetCustomersUseCase': Get.isRegistered<GetCustomersUseCase>(),
//       'SearchCustomersUseCase': Get.isRegistered<SearchCustomersUseCase>(),
//       'GetProductsUseCase': Get.isRegistered<GetProductsUseCase>(),
//       'SearchProductsUseCase': Get.isRegistered<SearchProductsUseCase>(),
//     };
//   }

//   /// Obtener informaci√≥n de estado del binding
//   static String getBindingStatus() {
//     final buffer = StringBuffer();
//     buffer.writeln('üìä Estado de InvoiceBinding:');
//     buffer.writeln(
//       '   - Repository: ${Get.isRegistered<InvoiceRepository>() ? "‚úÖ" : "‚ùå"}',
//     );
//     buffer.writeln(
//       '   - Stats Controller: ${Get.isRegistered<InvoiceStatsController>() ? "‚úÖ" : "‚ùå"}',
//     );
//     buffer.writeln(
//       '   - List Controller: ${Get.isRegistered<InvoiceListController>(tag: 'invoice_list') ? "‚úÖ" : "‚ùå"}',
//     );
//     buffer.writeln(
//       '   - Form Controller: ${Get.isRegistered<InvoiceFormController>() ? "‚úÖ" : "‚ùå"}',
//     );
//     buffer.writeln(
//       '   - Detail Controller: ${Get.isRegistered<InvoiceDetailController>(tag: 'invoice_detail') ? "‚úÖ" : "‚ùå"}',
//     );

//     // ‚úÖ NUEVO: Mostrar estado de dependencias externas
//     buffer.writeln('üìã Dependencias Externas:');
//     final externalDeps = getExternalDependencies();
//     externalDeps.forEach((name, isRegistered) {
//       buffer.writeln('   - $name: ${isRegistered ? "‚úÖ" : "‚ùå"}');
//     });

//     return buffer.toString();
//   }

//   /// Reinicializar todas las dependencias (√∫til para desarrollo/testing)
//   static void reinitialize() {
//     print('üîÑ Reinicializando InvoiceBinding...');
//     clearAllScreenControllers();

//     // Forzar recreaci√≥n de dependencias base si es necesario
//     if (Get.isRegistered<InvoiceRepository>()) {
//       Get.delete<InvoiceRepository>(force: true);
//     }

//     // Re-registrar binding
//     InvoiceBinding().dependencies();
//     print('‚úÖ InvoiceBinding reinicializado');
//   }

//   /// ‚úÖ NUEVO: M√©todo para verificar e inicializar dependencias externas
//   static void checkAndWarnMissingDependencies() {
//     final externalDeps = getExternalDependencies();
//     final missingDeps =
//         externalDeps.entries
//             .where((entry) => !entry.value)
//             .map((entry) => entry.key)
//             .toList();

//     if (missingDeps.isNotEmpty) {
//       print(
//         '‚ö†Ô∏è ADVERTENCIA: Dependencias externas faltantes para InvoiceFormController:',
//       );
//       for (final dep in missingDeps) {
//         print('   - $dep');
//       }
//       print('');
//       print('üí° SOLUCI√ìN:');
//       print(
//         '   1. Aseg√∫rate de que CustomerBinding est√© inicializado antes de InvoiceBinding',
//       );
//       print(
//         '   2. Aseg√∫rate de que ProductBinding est√© inicializado antes de InvoiceBinding',
//       );
//       print(
//         '   3. Orden recomendado: CoreBinding ‚Üí CustomerBinding ‚Üí ProductBinding ‚Üí InvoiceBinding',
//       );
//       print('');
//       print(
//         '‚ÑπÔ∏è El InvoiceFormController funcionar√° con datos mock si faltan estas dependencias.',
//       );
//     } else {
//       print('‚úÖ Todas las dependencias externas est√°n disponibles');
//     }
//   }
// }

// lib/features/invoices/presentation/bindings/invoice_binding.dart
import 'package:baudex_desktop/features/customers/domain/repositories/customer_repository.dart';
import 'package:baudex_desktop/features/customers/domain/usecases/get_customer_by_id_usecase.dart';
import 'package:get/get.dart';
import '../../../../app/core/network/dio_client.dart';
import '../../../../app/core/network/network_info.dart';
import '../../../../app/core/storage/secure_storage_service.dart';

import '../../domain/repositories/invoice_repository.dart';
import '../../domain/usecases/get_invoices_usecase.dart';
import '../../domain/usecases/get_invoice_by_id_usecase.dart';
import '../../domain/usecases/get_invoice_by_number_usecase.dart';
import '../../domain/usecases/create_invoice_usecase.dart';
import '../../domain/usecases/update_invoice_usecase.dart';
import '../../domain/usecases/confirm_invoice_usecase.dart';
import '../../domain/usecases/cancel_invoice_usecase.dart';
import '../../domain/usecases/add_payment_usecase.dart';
import '../../domain/usecases/get_invoice_stats_usecase.dart';
import '../../domain/usecases/get_overdue_invoices_usecase.dart';
import '../../domain/usecases/delete_invoice_usecase.dart';
import '../../domain/usecases/search_invoices_usecase.dart';
import '../../domain/usecases/get_invoices_by_customer_usecase.dart';

import '../../data/datasources/invoice_remote_datasource.dart';
import '../../data/datasources/invoice_local_datasource.dart';
import '../../data/repositories/invoice_repository_impl.dart';

// Importar use cases de clientes y productos
import '../../../customers/domain/usecases/get_customers_usecase.dart';
import '../../../customers/domain/usecases/search_customers_usecase.dart';
import '../../../products/domain/usecases/get_products_usecase.dart';
import '../../../products/domain/usecases/search_products_usecase.dart';

import '../controllers/invoice_list_controller.dart';
import '../controllers/invoice_form_controller.dart';
import '../controllers/invoice_detail_controller.dart';
import '../controllers/invoice_stats_controller.dart';

class InvoiceBinding extends Bindings {
  @override
  void dependencies() {
    print('üîß InvoiceBinding: Configurando dependencias...');

    // ==================== VERIFICACI√ìN DE DEPENDENCIAS CORE ====================
    _verifyCoreDependencies();

    // ==================== DATA SOURCES ====================
    _registerDataSources();

    // ==================== REPOSITORY ====================
    _registerRepository();

    // ==================== USE CASES ====================
    _registerUseCases();

    // ==================== STATS CONTROLLER (SINGLETON) ====================
    _registerStatsController();

    print('‚úÖ InvoiceBinding: Dependencias configuradas exitosamente');
  }

  /// Verificar que las dependencias core est√©n disponibles
  void _verifyCoreDependencies() {
    if (!Get.isRegistered<DioClient>()) {
      throw Exception(
        'DioClient no est√° registrado. Aseg√∫rate de inicializar CoreBinding primero.',
      );
    }
    if (!Get.isRegistered<NetworkInfo>()) {
      throw Exception(
        'NetworkInfo no est√° registrado. Aseg√∫rate de inicializar CoreBinding primero.',
      );
    }
    if (!Get.isRegistered<SecureStorageService>()) {
      throw Exception(
        'SecureStorageService no est√° registrado. Aseg√∫rate de inicializar CoreBinding primero.',
      );
    }
    print('‚úÖ Dependencias core verificadas');
  }

  /// Registrar data sources
  void _registerDataSources() {
    // Remote DataSource
    Get.lazyPut<InvoiceRemoteDataSource>(
      () => InvoiceRemoteDataSourceImpl(dioClient: Get.find<DioClient>()),
      fenix: true,
    );

    // Local DataSource
    Get.lazyPut<InvoiceLocalDataSource>(
      () => InvoiceLocalDataSourceImpl(
        storageService: Get.find<SecureStorageService>(),
      ),
      fenix: true,
    );
    print('‚úÖ Data sources registradas');
  }

  /// Registrar repository
  void _registerRepository() {
    Get.lazyPut<InvoiceRepository>(
      () => InvoiceRepositoryImpl(
        remoteDataSource: Get.find<InvoiceRemoteDataSource>(),
        localDataSource: Get.find<InvoiceLocalDataSource>(),
        networkInfo: Get.find<NetworkInfo>(),
      ),
      fenix: true,
    );
    print('‚úÖ Repository registrado');
  }

  /// Registrar use cases
  void _registerUseCases() {
    // Read Use Cases
    Get.lazyPut(
      () => GetInvoicesUseCase(Get.find<InvoiceRepository>()),
      fenix: true,
    );
    Get.lazyPut(
      () => GetInvoiceByIdUseCase(Get.find<InvoiceRepository>()),
      fenix: true,
    );
    Get.lazyPut(
      () => GetInvoiceByNumberUseCase(Get.find<InvoiceRepository>()),
      fenix: true,
    );
    Get.lazyPut(
      () => GetInvoiceStatsUseCase(Get.find<InvoiceRepository>()),
      fenix: true,
    );
    Get.lazyPut(
      () => GetOverdueInvoicesUseCase(Get.find<InvoiceRepository>()),
      fenix: true,
    );
    Get.lazyPut(
      () => SearchInvoicesUseCase(Get.find<InvoiceRepository>()),
      fenix: true,
    );
    Get.lazyPut(
      () => GetInvoicesByCustomerUseCase(Get.find<InvoiceRepository>()),
      fenix: true,
    );

    // Write Use Cases
    Get.lazyPut(
      () => CreateInvoiceUseCase(Get.find<InvoiceRepository>()),
      fenix: true,
    );
    Get.lazyPut(
      () => UpdateInvoiceUseCase(Get.find<InvoiceRepository>()),
      fenix: true,
    );
    Get.lazyPut(
      () => ConfirmInvoiceUseCase(Get.find<InvoiceRepository>()),
      fenix: true,
    );
    Get.lazyPut(
      () => CancelInvoiceUseCase(Get.find<InvoiceRepository>()),
      fenix: true,
    );
    Get.lazyPut(
      () => AddPaymentUseCase(Get.find<InvoiceRepository>()),
      fenix: true,
    );
    Get.lazyPut(
      () => DeleteInvoiceUseCase(Get.find<InvoiceRepository>()),
      fenix: true,
    );
    print('‚úÖ Use cases registrados');
  }

  /// Registrar controlador de estad√≠sticas (singleton global)
  void _registerStatsController() {
    if (!Get.isRegistered<InvoiceStatsController>()) {
      Get.put(
        InvoiceStatsController(
          getInvoiceStatsUseCase: Get.find<GetInvoiceStatsUseCase>(),
          getOverdueInvoicesUseCase: Get.find<GetOverdueInvoicesUseCase>(),
        ),
        permanent: true,
      );
      print('‚úÖ InvoiceStatsController registrado como singleton');
    }
  }

  // ==================== M√âTODOS PARA CONTROLADORES ESPEC√çFICOS ====================

  /// ‚úÖ SOLUCI√ìN: Registrar controlador de lista SIN TAG
  static void registerListController() {
    if (!Get.isRegistered<InvoiceListController>()) {
      try {
        Get.put(
          InvoiceListController(
            getInvoicesUseCase: Get.find<GetInvoicesUseCase>(),
            searchInvoicesUseCase: Get.find<SearchInvoicesUseCase>(),
            deleteInvoiceUseCase: Get.find<DeleteInvoiceUseCase>(),
            confirmInvoiceUseCase: Get.find<ConfirmInvoiceUseCase>(),
            cancelInvoiceUseCase: Get.find<CancelInvoiceUseCase>(),
          ),
          // ‚úÖ REMOVER TAG PARA QUE SEA ACCESIBLE SIN TAG
          // tag: 'invoice_list', ‚Üê COMENTADO
        );
        print('‚úÖ InvoiceListController registrado (sin tag)');
      } catch (e) {
        print('‚ùå Error registrando InvoiceListController: $e');
        throw Exception('No se pudo registrar InvoiceListController: $e');
      }
    } else {
      print('‚ÑπÔ∏è InvoiceListController ya est√° registrado');
    }
  }

  /// Registrar controlador de formulario
  // static void registerFormController() {
  //   if (!Get.isRegistered<InvoiceFormController>()) {
  //     try {
  //       // Obtener use cases de clientes y productos de forma segura
  //       final getCustomersUseCase = _getUseCaseSafely<GetCustomersUseCase>();
  //       final searchCustomersUseCase =
  //           _getUseCaseSafely<SearchCustomersUseCase>();
  //       final getProductsUseCase = _getUseCaseSafely<GetProductsUseCase>();
  //       final searchProductsUseCase =
  //           _getUseCaseSafely<SearchProductsUseCase>();

  //       // Log de disponibilidad de dependencias
  //       print('üîç Dependencias disponibles para InvoiceFormController:');
  //       print(
  //         '   - GetCustomersUseCase: ${getCustomersUseCase != null ? "‚úÖ" : "‚ùå"}',
  //       );
  //       print(
  //         '   - SearchCustomersUseCase: ${searchCustomersUseCase != null ? "‚úÖ" : "‚ùå"}',
  //       );
  //       print(
  //         '   - GetProductsUseCase: ${getProductsUseCase != null ? "‚úÖ" : "‚ùå"}',
  //       );
  //       print(
  //         '   - SearchProductsUseCase: ${searchProductsUseCase != null ? "‚úÖ" : "‚ùå"}',
  //       );

  //       Get.put(
  //         InvoiceFormController(
  //           // Dependencias requeridas
  //           createInvoiceUseCase: Get.find<CreateInvoiceUseCase>(),
  //           updateInvoiceUseCase: Get.find<UpdateInvoiceUseCase>(),
  //           getInvoiceByIdUseCase: Get.find<GetInvoiceByIdUseCase>(),
  //           // Dependencias opcionales para clientes y productos
  //           getCustomersUseCase: getCustomersUseCase,
  //           searchCustomersUseCase: searchCustomersUseCase,
  //           getProductsUseCase: getProductsUseCase,
  //           searchProductsUseCase: searchProductsUseCase,
  //         ),
  //       );
  //       print(
  //         '‚úÖ InvoiceFormController registrado con dependencias disponibles',
  //       );
  //     } catch (e) {
  //       print('‚ùå Error registrando InvoiceFormController: $e');
  //       throw Exception('No se pudo registrar InvoiceFormController: $e');
  //     }
  //   } else {
  //     print('‚ÑπÔ∏è InvoiceFormController ya est√° registrado');
  //   }
  // }

  static void registerFormController() {
    if (!Get.isRegistered<InvoiceFormController>()) {
      try {
        print('üîß [CREAR FACTURA] Inicializando bindings...');

        // ‚úÖ PASO 1: Verificar dependencias externas cr√≠ticas
        _verifyExternalDependencies();

        // Obtener use cases de clientes y productos de forma segura
        final getCustomersUseCase = _getUseCaseSafely<GetCustomersUseCase>();
        final searchCustomersUseCase =
            _getUseCaseSafely<SearchCustomersUseCase>();
        final getCustomerByIdUseCase =
            _getUseCaseSafely<GetCustomerByIdUseCase>();
        final getProductsUseCase = _getUseCaseSafely<GetProductsUseCase>();
        final searchProductsUseCase =
            _getUseCaseSafely<SearchProductsUseCase>();

        // Log detallado de disponibilidad de dependencias
        print('üîç Dependencias disponibles para InvoiceFormController:');
        print(
          '   - GetCustomersUseCase: ${getCustomersUseCase != null ? "‚úÖ" : "‚ùå"}',
        );
        print(
          '   - SearchCustomersUseCase: ${searchCustomersUseCase != null ? "‚úÖ" : "‚ùå"}',
        );
        print(
          '   - GetCustomerByIdUseCase: ${getCustomerByIdUseCase != null ? "‚úÖ" : "‚ùå"}',
        );
        print(
          '   - GetProductsUseCase: ${getProductsUseCase != null ? "‚úÖ" : "‚ùå"}',
        );
        print(
          '   - SearchProductsUseCase: ${searchProductsUseCase != null ? "‚úÖ" : "‚ùå"}',
        );

        Get.put(
          InvoiceFormController(
            // Dependencias requeridas (estas DEBEN estar disponibles)
            createInvoiceUseCase: Get.find<CreateInvoiceUseCase>(),
            updateInvoiceUseCase: Get.find<UpdateInvoiceUseCase>(),
            getInvoiceByIdUseCase: Get.find<GetInvoiceByIdUseCase>(),
            // Dependencias opcionales para clientes y productos
            getCustomersUseCase: getCustomersUseCase,
            searchCustomersUseCase: searchCustomersUseCase,
            getCustomerByIdUseCase: getCustomerByIdUseCase,
            getProductsUseCase: getProductsUseCase,
            searchProductsUseCase: searchProductsUseCase,
          ),
        );

        print('‚úÖ [CREAR FACTURA] InvoiceFormController registrado');

        // Log final de estado
        _logControllerStatus();
      } catch (e) {
        print('‚ùå Error registrando InvoiceFormController: $e');
        print('üìç Stack trace: ${StackTrace.current}');
        throw Exception('No se pudo registrar InvoiceFormController: $e');
      }
    } else {
      print('‚ÑπÔ∏è InvoiceFormController ya est√° registrado');
    }
  }

  // static void _verifyExternalDependencies() {
  //   print('üîç Verificando dependencias externas...');

  //   // Verificar CustomerRepository
  //   if (!Get.isRegistered<CustomerRepository>()) {
  //     print(
  //       '‚ö†Ô∏è CustomerRepository no encontrado - esto puede causar problemas',
  //     );
  //     print(
  //       'üí° Sugerencia: Aseg√∫rate de que InitialBinding est√© inicializado correctamente',
  //     );
  //   } else {
  //     print('‚úÖ CustomerRepository disponible');
  //   }

  //   // Verificar GetCustomerByIdUseCase espec√≠ficamente
  //   if (!Get.isRegistered<GetCustomerByIdUseCase>()) {
  //     print('‚ö†Ô∏è GetCustomerByIdUseCase no encontrado');
  //     print('üí° El cliente por defecto usar√° fallback');
  //   } else {
  //     print('‚úÖ GetCustomerByIdUseCase disponible');
  //   }

  //   // Verificar use cases principales de Invoice
  //   final requiredUseCases = [
  //     'CreateInvoiceUseCase',
  //     'UpdateInvoiceUseCase',
  //     'GetInvoiceByIdUseCase',
  //   ];

  //   for (String useCase in requiredUseCases) {
  //     final isRegistered = Get.isRegistered(tag: useCase);
  //     if (!isRegistered) {
  //       throw Exception('UseCase cr√≠tico no encontrado: $useCase');
  //     }
  //   }

  //   print('‚úÖ Verificaci√≥n de dependencias completada');
  // }

  /// ‚úÖ CORREGIDO: Verificar dependencias externas cr√≠ticas
  static void _verifyExternalDependencies() {
    print('üîç Verificando dependencias externas...');

    // Verificar CustomerRepository
    if (!Get.isRegistered<CustomerRepository>()) {
      print(
        '‚ö†Ô∏è CustomerRepository no encontrado - esto puede causar problemas',
      );
      print(
        'üí° Sugerencia: Aseg√∫rate de que InitialBinding est√© inicializado correctamente',
      );
    } else {
      print('‚úÖ CustomerRepository disponible');
    }

    // Verificar GetCustomerByIdUseCase espec√≠ficamente
    if (!Get.isRegistered<GetCustomerByIdUseCase>()) {
      print('‚ö†Ô∏è GetCustomerByIdUseCase no encontrado');
      print('üí° El cliente por defecto usar√° fallback');
    } else {
      print('‚úÖ GetCustomerByIdUseCase disponible');
    }

    // ‚úÖ CORRECCI√ìN: Verificar use cases principales de Invoice con el tipo correcto
    print('üîç Verificando use cases cr√≠ticos de Invoice...');

    if (!Get.isRegistered<CreateInvoiceUseCase>()) {
      print('‚ùå CreateInvoiceUseCase no encontrado');
      throw Exception('UseCase cr√≠tico no encontrado: CreateInvoiceUseCase');
    } else {
      print('‚úÖ CreateInvoiceUseCase disponible');
    }

    if (!Get.isRegistered<UpdateInvoiceUseCase>()) {
      print('‚ùå UpdateInvoiceUseCase no encontrado');
      throw Exception('UseCase cr√≠tico no encontrado: UpdateInvoiceUseCase');
    } else {
      print('‚úÖ UpdateInvoiceUseCase disponible');
    }

    if (!Get.isRegistered<GetInvoiceByIdUseCase>()) {
      print('‚ùå GetInvoiceByIdUseCase no encontrado');
      throw Exception('UseCase cr√≠tico no encontrado: GetInvoiceByIdUseCase');
    } else {
      print('‚úÖ GetInvoiceByIdUseCase disponible');
    }

    print('‚úÖ Verificaci√≥n de dependencias completada');
  }

  /// ‚úÖ NUEVO: Log del estado final del controlador
  static void _logControllerStatus() {
    if (Get.isRegistered<InvoiceFormController>()) {
      print('üìä Estado final de InvoiceFormController:');
      print('   - Registrado: ‚úÖ');
      print('   - Puede crear facturas: ‚úÖ');
      print(
        '   - Dependencias customer: ${Get.isRegistered<GetCustomerByIdUseCase>() ? "‚úÖ" : "‚ùå (usar√° mock)"}',
      );
      print(
        '   - Dependencias product: ${Get.isRegistered<GetProductsUseCase>() ? "‚úÖ" : "‚ùå (usar√° mock)"}',
      );
    } else {
      print('‚ùå InvoiceFormController NO se registr√≥ correctamente');
    }
  }

  /// ‚úÖ SOLUCI√ìN: Registrar controlador de detalle SIN TAG
  static void registerDetailController() {
    if (!Get.isRegistered<InvoiceDetailController>()) {
      try {
        Get.put(
          InvoiceDetailController(
            getInvoiceByIdUseCase: Get.find<GetInvoiceByIdUseCase>(),
            addPaymentUseCase: Get.find<AddPaymentUseCase>(),
            confirmInvoiceUseCase: Get.find<ConfirmInvoiceUseCase>(),
            cancelInvoiceUseCase: Get.find<CancelInvoiceUseCase>(),
            deleteInvoiceUseCase: Get.find<DeleteInvoiceUseCase>(),
          ),
          // ‚úÖ REMOVER TAG PARA QUE SEA ACCESIBLE SIN TAG
          // tag: 'invoice_detail', ‚Üê COMENTADO
        );
        print('‚úÖ InvoiceDetailController registrado (sin tag)');
      } catch (e) {
        print('‚ùå Error registrando InvoiceDetailController: $e');
        throw Exception('No se pudo registrar InvoiceDetailController: $e');
      }
    } else {
      print('‚ÑπÔ∏è InvoiceDetailController ya est√° registrado');
    }
  }

  /// M√©todo helper para obtener use cases de forma segura
  static T? _getUseCaseSafely<T>() {
    try {
      if (Get.isRegistered<T>()) {
        return Get.find<T>();
      } else {
        print('‚ö†Ô∏è UseCase ${T.toString()} no est√° registrado');
        return null;
      }
    } catch (e) {
      print('‚ö†Ô∏è Error al obtener ${T.toString()}: $e');
      return null;
    }
  }

  // ==================== M√âTODOS PARA LIMPIAR CONTROLADORES ====================

  /// ‚úÖ SOLUCI√ìN: Limpiar controlador de lista SIN TAG
  static void clearListController() {
    if (Get.isRegistered<InvoiceListController>()) {
      Get.delete<InvoiceListController>();
      print('üßπ InvoiceListController limpiado');
    }
  }

  /// Limpiar controlador de formulario
  static void clearFormController() {
    if (Get.isRegistered<InvoiceFormController>()) {
      Get.delete<InvoiceFormController>();
      print('üßπ InvoiceFormController limpiado');
    }
  }

  /// ‚úÖ SOLUCI√ìN: Limpiar controlador de detalle SIN TAG
  static void clearDetailController() {
    if (Get.isRegistered<InvoiceDetailController>()) {
      Get.delete<InvoiceDetailController>();
      print('üßπ InvoiceDetailController limpiado');
    }
  }

  /// Limpiar todos los controladores espec√≠ficos (mantener stats y dependencias base)
  static void clearAllScreenControllers() {
    clearListController();
    clearFormController();
    clearDetailController();
    print('üßπ Todos los controladores de pantalla limpiados');
  }

  // ==================== M√âTODOS DE UTILIDAD ====================

  /// Verificar si todas las dependencias base est√°n registradas
  static bool areBaseDependenciesRegistered() {
    return Get.isRegistered<InvoiceRepository>() &&
        Get.isRegistered<GetInvoicesUseCase>() &&
        Get.isRegistered<CreateInvoiceUseCase>() &&
        Get.isRegistered<GetInvoiceByIdUseCase>();
  }

  /// Verificar si el controlador de estad√≠sticas est√° registrado
  static bool isStatsControllerRegistered() {
    return Get.isRegistered<InvoiceStatsController>();
  }

  /// Verificar dependencias externas disponibles
  static Map<String, bool> getExternalDependencies() {
    return {
      'GetCustomersUseCase': Get.isRegistered<GetCustomersUseCase>(),
      'SearchCustomersUseCase': Get.isRegistered<SearchCustomersUseCase>(),
      'GetProductsUseCase': Get.isRegistered<GetProductsUseCase>(),
      'SearchProductsUseCase': Get.isRegistered<SearchProductsUseCase>(),
    };
  }

  /// ‚úÖ SOLUCI√ìN: Obtener informaci√≥n de estado del binding (actualizado)
  static String getBindingStatus() {
    final buffer = StringBuffer();
    buffer.writeln('üìä Estado de InvoiceBinding:');
    buffer.writeln(
      '   - Repository: ${Get.isRegistered<InvoiceRepository>() ? "‚úÖ" : "‚ùå"}',
    );
    buffer.writeln(
      '   - Stats Controller: ${Get.isRegistered<InvoiceStatsController>() ? "‚úÖ" : "‚ùå"}',
    );
    buffer.writeln(
      '   - List Controller: ${Get.isRegistered<InvoiceListController>() ? "‚úÖ" : "‚ùå"}',
    );
    buffer.writeln(
      '   - Form Controller: ${Get.isRegistered<InvoiceFormController>() ? "‚úÖ" : "‚ùå"}',
    );
    buffer.writeln(
      '   - Detail Controller: ${Get.isRegistered<InvoiceDetailController>() ? "‚úÖ" : "‚ùå"}',
    );

    // Mostrar estado de dependencias externas
    buffer.writeln('üìã Dependencias Externas:');
    final externalDeps = getExternalDependencies();
    externalDeps.forEach((name, isRegistered) {
      buffer.writeln('   - $name: ${isRegistered ? "‚úÖ" : "‚ùå"}');
    });

    return buffer.toString();
  }

  /// Reinicializar todas las dependencias (√∫til para desarrollo/testing)
  static void reinitialize() {
    print('üîÑ Reinicializando InvoiceBinding...');
    clearAllScreenControllers();

    // Forzar recreaci√≥n de dependencias base si es necesario
    if (Get.isRegistered<InvoiceRepository>()) {
      Get.delete<InvoiceRepository>(force: true);
    }

    // Re-registrar binding
    InvoiceBinding().dependencies();
    print('‚úÖ InvoiceBinding reinicializado');
  }

  /// M√©todo para verificar e inicializar dependencias externas
  static void checkAndWarnMissingDependencies() {
    final externalDeps = getExternalDependencies();
    final missingDeps =
        externalDeps.entries
            .where((entry) => !entry.value)
            .map((entry) => entry.key)
            .toList();

    if (missingDeps.isNotEmpty) {
      print(
        '‚ö†Ô∏è ADVERTENCIA: Dependencias externas faltantes para InvoiceFormController:',
      );
      for (final dep in missingDeps) {
        print('   - $dep');
      }
      print('');
      print('üí° SOLUCI√ìN:');
      print(
        '   1. Aseg√∫rate de que CustomerBinding est√© inicializado antes de InvoiceBinding',
      );
      print(
        '   2. Aseg√∫rate de que ProductBinding est√© inicializado antes de InvoiceBinding',
      );
      print(
        '   3. Orden recomendado: CoreBinding ‚Üí CustomerBinding ‚Üí ProductBinding ‚Üí InvoiceBinding',
      );
      print('');
      print(
        '‚ÑπÔ∏è El InvoiceFormController funcionar√° con datos mock si faltan estas dependencias.',
      );
    } else {
      print('‚úÖ Todas las dependencias externas est√°n disponibles');
    }
  }

  /// ‚úÖ NUEVO: M√©todo de utilidad para debug
  static void debugControllerRegistration() {
    print('üîç DEBUG: Estado de controladores de Invoice:');
    print(
      '   - InvoiceListController: ${Get.isRegistered<InvoiceListController>() ? "‚úÖ Registrado" : "‚ùå No registrado"}',
    );
    print(
      '   - InvoiceFormController: ${Get.isRegistered<InvoiceFormController>() ? "‚úÖ Registrado" : "‚ùå No registrado"}',
    );
    print(
      '   - InvoiceDetailController: ${Get.isRegistered<InvoiceDetailController>() ? "‚úÖ Registrado" : "‚ùå No registrado"}',
    );
    print(
      '   - InvoiceStatsController: ${Get.isRegistered<InvoiceStatsController>() ? "‚úÖ Registrado" : "‚ùå No registrado"}',
    );

    // Verificar use cases principales
    print('üîç DEBUG: Estado de Use Cases principales:');
    print(
      '   - GetInvoicesUseCase: ${Get.isRegistered<GetInvoicesUseCase>() ? "‚úÖ" : "‚ùå"}',
    );
    print(
      '   - CreateInvoiceUseCase: ${Get.isRegistered<CreateInvoiceUseCase>() ? "‚úÖ" : "‚ùå"}',
    );
    print(
      '   - SearchInvoicesUseCase: ${Get.isRegistered<SearchInvoicesUseCase>() ? "‚úÖ" : "‚ùå"}',
    );
  }
}
